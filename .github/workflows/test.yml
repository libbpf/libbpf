name: libbpf-ci

on: 
  pull_request:
  push:
  schedule:
    - cron:  '0 18 * * *'

concurrency: 
  group: ci-test-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  vmtest:
    runs-on: ${{ matrix.runs_on }}
    name: Kernel ${{ matrix.kernel }} on ${{ matrix.runs_on }} + selftests
    strategy:
      fail-fast: false
      matrix:
        include:
          - kernel: 'LATEST'
            runs_on: ubuntu-latest
          - kernel: 'LATEST'
            runs_on: z15
          - kernel: '5.5.0'
            runs_on: ubuntu-latest
          - kernel: '4.9.0'
            runs_on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: ./.github/actions/setup
        name: Setup
      - uses: ./.github/actions/vmtest
        name: vmtest
        with:
          kernel: ${{ matrix.kernel }}

  debian:
    runs-on: ubuntu-latest
    name: Debian Build (${{ matrix.name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: default
            target: RUN
          - name: ASan+UBSan
            target: RUN_ASAN
          - name: clang
            target: RUN_CLANG
          - name: clang ASan+UBSan
            target: RUN_CLANG_ASAN
          - name: gcc-10
            target: RUN_GCC10
          - name: gcc-10 ASan+UBSan
            target: RUN_GCC10_ASAN
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: ./.github/actions/setup
        name: Setup
      - uses: ./.github/actions/debian
        name: Build
        with:
          target: ${{ matrix.target }}

  ubuntu:
    runs-on: ubuntu-latest
    name: Ubuntu Focal Build (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
          - arch: ppc64le
          - arch: s390x
          - arch: x86
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: ./.github/actions/setup
        name: Pre-Setup
      - run: source /tmp/ci_setup && sudo -E $CI_ROOT/managers/ubuntu.sh
        if: matrix.arch == 'x86'
        name: Setup
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build in docker
        if: matrix.arch != 'x86'
        with:
          distro:
            ubuntu20.04
          arch:
            ${{ matrix.arch }}
          setup:
            cp /tmp/ci_setup $GITHUB_WORKSPACE
          dockerRunArgs: |
              --volume "${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE}"
          shell: /bin/bash
          install: |
              export DEBIAN_FRONTEND=noninteractive
              export TZ="America/Los_Angeles"
              apt-get update -y
              apt-get install -y tzdata build-essential sudo
          run: source ${GITHUB_WORKSPACE}/ci_setup && $CI_ROOT/managers/ubuntu.sh
